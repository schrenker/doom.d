#+TITLE: Literate doom emacs config

* Headers
- Setup lexical binding headers at the beginning of config files
#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-
#+end_src

#+begin_src emacs-lisp :tangle config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el
#+end_src


* Package config
** Evil
*** Set up evil packages
  - Evil commentary for quick commenting/uncommenting
  - disable evil snipe, so I can use 's' for substitution
#+begin_src emacs-lisp :tangle packages.el
(package! evil-commentary)
(package! evil-snipe :disable t)
#+end_src

*** Split windows so that right/down is focused after the split
#+begin_src emacs-lisp :tangle config.el
(setq evil-vsplit-window-right t
      evil-split-window-below t)
#+end_src

*** Line up Y behavior to other operators
#+begin_src emacs-lisp :tangle config.el
(setq evil-want-Y-yank-to-eol t)
#+end_src

*** Don't continue comments on o/O, creating empty lines
#+begin_src emacs-lisp :tangle config.el
(setq +evil-want-o/O-to-continue-comments nil)
#+end_src


** Treemacs
*** Pull all the icons for treemacs
#+begin_src emacs-lisp :tangle packages.el
(package! treemacs-all-the-icons)
#+end_src

*** Set treemacs themes
#+begin_src emacs-lisp :tangle config.el
(require 'treemacs-all-the-icons)
(treemacs-load-theme "all-the-icons")

(setq  doom-themes-treemacs-theme "doom-colors")
#+end_src


** Org mode
*** Set up path for org mode
- Set main org-mode directory
- Set capture file inside of org-mode directory
#+begin_src emacs-lisp :tangle config.el
(setq org-directory "/Users/sebastian/code/engineer_notebook"
      org-default-notes-file (concat org-directory "/!capture.org"))
#+end_src

*** Set up headline encryption
- Encrypt headlines with tag "crypt"
- Disable autosave for files with "crypt" tag
- Use personal GPG key for encryption
#+begin_src emacs-lisp :tangle config.el
(require 'org-crypt)

(setq org-tags-exclude-from-inheritance '("crypt")
      org-crypt-disable-auto-save t
      org-crypt-key "Sebastian Zawadzki")
#+end_src

*** Disable electric indent
#+begin_src emacs-lisp :tangle config.el
(add-hook! org-mode (electric-indent-local-mode -1))
#+end_src

*** Org kanban
#+begin_src emacs-lisp :tangle packages.el
(package! org-kanban)
#+end_src

*** Inline images
- Enable displaying of remote inline images
- Startup with inline images
- Allow for controlling image width
#+begin_src emacs-lisp :tangle config.el
(setq org-display-remote-inline-images t
      org-startup-with-inline-images t
      org-image-actual-width nil)
#+end_src

*** Log time of done tasks
#+begin_src emacs-lisp :tangle config.el
(setq org-log-done 'time)
#+end_src

*** Move tags to the far right
#+begin_src emacs-lisp :tangle config.el
(setq org-tags-column -77)
#+end_src

*** Task status and prioritization
#+begin_src emacs-lisp :tangle config.el
(after! org
  (setq
   org-crypt-disable-auto-save t
   org-priority-highest '?A
   org-priority-lowest  '?C
   org-priority-default '?C
   org-priority-start-cycle-with-default t
   org-priority-faces '((?A :foreground "#FF6C6B" :weight normal)
                        (?B :foreground "#ECBE7B" :weight normal)
                        (?C :foreground "#51AFEF" :weight normal))
   org-todo-keywords '((sequence "[TODO](t)" "[INPROGRESS](i)" "[WAITING](w)"  "|" "[DONE](d)" "[CANCELLED](c)"))
   org-todo-keyword-faces
   '(("[TODO]" :foreground "#8741bb" :weight normal)
     ("[INPROGRESS]" :foreground "#98BE65" :weight normal)
     ("[WAITING]" :foreground "#DA8548" :weight normal)
     ("[DONE]" :foreground "#9FA4BB" :weight normal )
     ("[CANCELLED]" :foreground "#574C58" :weight normal))))

(after! org-fancy-priorities
  (setq
   org-fancy-priorities-list '((65 . "⁂")
                               (66 . "⁑")
                               (67 . "⁕"))))
#+end_src


** Company
*** Disable company for org-mode
#+begin_src emacs-lisp :tangle config.el
(setq company-global-modes '(not org-mode))
(add-hook 'org-mode-hook (lambda () ( company-mode -1)))
#+end_src

*** Disable autocommit of completion
#+begin_src emacs-lisp :tangle config.el
(setq company-auto-complete nil)
#+end_src

*** Tooltips
#+begin_src emacs-lisp :tangle config.el
(setq company-tooltip-align-annotations t
      company-tooltip-minimum (- scroll-margin 1)
      company-tooltip-flip-when-above t)
#+end_src

*** Matching
#+begin_src emacs-lisp :tangle config.el
(setq company-minimum-prefix-length 1
      company-require-match nil)
#+end_src

*** Delay
#+begin_src emacs-lisp :tangle config.el
(setq company-idle-delay 0)
#+end_src


** Latex
*** Disable flycheck
#+begin_src emacs-lisp :tangle config.el
(setq flycheck-global-modes '(not LaTeX-mode latex-mode))
#+end_src

*** Set up latex engine
#+begin_src emacs-lisp :tangle config.el
(setq TeX-engine-alist
      '((xetex "XeTeX -shell escape"
               "xetex -shell-escape"
               "xelatex -shell-escape")))
#+end_src


* Config
** Personal information
- Basic personal information, that some of the packages might require
#+begin_src emacs-lisp :tangle config.el
(setq  user-full-name "Sebastian Zawadzki"
       user-mail-address (rot13 "mnjnqmxvf95@tznvy.pbz"))
#+end_src


** Keybindings
*** MacOs
**** Mac specific keybindings
#+begin_src emacs-lisp :tangle config.el
(cond (IS-MAC
       (setq mac-command-modifier       'meta
             mac-option-modifier        'alt)))
#+end_src


**** Mac style copy/paste/app exiting
#+begin_src emacs-lisp :tangle config.el
(map! "M-c" 'kill-ring-save)
(map! "M-v" 'yank)
(map! "M-q" 'save-buffers-kill-terminal)
#+end_src


**** emacs window control
- Change regular active window rotation to ace-window
- Enable jumping to treemacs from any window in frame
#+begin_src emacs-lisp :tangle config.el
(map! :map evil-window-map
      :g "w" 'ace-window
      :g "t" 'treemacs-select-window)
#+end_src


*** Evil
**** Enables key-chord
#+begin_src emacs-lisp :tangle packages.el
(package! key-chord)
#+end_src

**** Double tapping ';' in insert mode moves cursor one character to the right
#+begin_src emacs-lisp :tangle config.el
(require 'key-chord)

(key-chord-define evil-insert-state-map ";;" 'right-char)
(key-chord-mode 1)
#+end_src

**** Disable evil keybindings for git-timemachine
#+begin_src emacs-lisp :tangle config.el
(with-eval-after-load 'git-timemachine
  (evil-make-overriding-map git-timemachine-mode-map 'normal)
  (add-hook 'git-timemachine-mode-hook #'evil-normalize-keymaps))
#+end_src


*** Org mode
**** org-mode-map
- Set keybind for decryption of entries
- Set keybind for showing inline images
- Force tab to use org-cycle instead of faultly switching to company after reload
#+begin_src emacs-lisp :tangle config.el
(map! :map org-mode-map
      :localleader "$" 'org-decrypt-entry
      :localleader "a i" 'org-display-inline-images
      "<tab>" 'org-cycle)
#+end_src

*** Set visual line movement via gj and gk
#+begin_src emacs-lisp :tangle config.el
(after! org
  (map! :nv "gj" #'evil-next-visual-line
        :nv "gk" #'evil-previous-visual-line))
#+end_src


** Appearance
*** Emacs theme
**** Default fallback theme
#+begin_src emacs-lisp :tangle config.el
(setq doom-theme 'doom-one)
#+end_src

**** Day/Night mode switching function (based on emacs-plus patch)
#+begin_src emacs-lisp :tangle config.el
(defun my/apply-theme (appearance)
  (mapc #'disable-theme custom-enabled-themes)
  (pcase appearance
    ('light (setq doom-theme 'doom-solarized-light)
             (load-theme 'doom-solarized-light t))
    ('dark (setq doom-theme 'doom-solarized-dark)
             (load-theme 'doom-solarized-dark t))))

(add-hook 'ns-system-appearance-change-functions #'my/apply-theme)
#+end_src

**** Set font
#+begin_src emacs-lisp :tangle config.el
(setq  doom-font (font-spec :family "FiraCode Nerd Font" :style "Retina" :size 12))
#+end_src

**** Start emacs maximized
#+begin_src emacs-lisp :tangle config.el
(setq initial-frame-alist '((fullscreen . maximized)))
#+end_src

**** Set frame title and icon
#+begin_src emacs-lisp :tangle config.el
(setq-default
 frame-title-format '("Doom")
 ns-use-proxy-icon nil)
#+end_src

**** Make window indicator more visible
#+begin_src emacs-lisp :tangle config.el
(custom-set-faces!
  '(aw-leading-char-face
    :foreground "red"
    :weight bold :height 1.5 ))
#+end_src


*** Modeline
- Setup icons for modeline
#+begin_src emacs-lisp :tangle config.el
(setq doom-modeline-icon (display-graphic-p)
      doom-modeline-major-mode-icon t
      doom-modeline-major-mode-color-icon t
      doom-modeline-buffer-state-icon t)
#+end_src


*** Org mode
**** Headlines
#+begin_src emacs-lisp :tangle config.el
(setq org-superstar-headline-bullets-list '("⁖"))

(after! org
  (custom-set-faces!
    '(org-level-1 :height 1.04 :inherit outline-1)
    '(org-level-2 :height 1.04 :inherit outline-2)
    '(org-level-3 :height 1.04 :inherit outline-3)
    '(org-level-4 :height 1.04 :inherit outline-4)
    '(org-level-5 :height 1.04 :inherit outline-5)
    '(org-level-6 :height 1.04 :inherit outline-6)
    '(org-level-7 :height 1.04 :inherit outline-7)
    '(org-level-8 :height 1.04 :inherit outline-8)))
#+end_src

**** Bullet points
- disable superstar, and replace with dot
#+begin_src emacs-lisp :tangle config.el
(setq org-superstar-prettify-item-bullets nil)

(font-lock-add-keywords 'org-mode
 '(("^ *\\([-]\\) "
 (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+end_src

**** Checkboxes
#+begin_src emacs-lisp :tangle config.el
(add-hook 'org-mode-hook (lambda ()
  (push '("[ ]" . "") prettify-symbols-alist)
  (push '("[-]" . "" ) prettify-symbols-alist)
  (push '("[X]" . "" ) prettify-symbols-alist)
  (push '("[#A]" . "⁂" ) prettify-symbols-alist)
  (push '("[#B]" . "⁑" ) prettify-symbols-alist)
  (push '("[#C]" . "⁕" ) prettify-symbols-alist)
  (prettify-symbols-mode)))
#+end_src


** Behavior
*** Set default tab-width
#+begin_src emacs-lisp :tangle config.el
(setq-default tab-width 2)
#+end_src

*** Relative numbers
#+begin_src emacs-lisp :tangle config.el
(setq  display-line-numbers-type 'relative)
#+end_src

*** Set scroll margin
#+begin_src emacs-lisp :tangle config.el
(setq scroll-margin 5)
#+end_src

*** Always make windows proportional after splitting
#+begin_src emacs-lisp :tangle config.el
(setq-default window-combination-resize t)
#+end_src

*** Truncate ellipsis
#+begin_src emacs-lisp :tangle config.el
(setq-default truncate-string-ellipsis "…")
#+end_src

*** Disable final newline in files
#+begin_src emacs-lisp :tangle config.el
(setq require-final-newline nil)
#+end_src


*** Uniquify
#+begin_src emacs-lisp :tangle config.el
(require 'uniquify)

(setq-default
 uniquify-buffer-name-style 'forward)

(setq uniquify-separator "/"
      uniquify-after-kill-buffer-p t
      uniquify-ignore-buffers-re "^\\*")
#+end_src


*** Files
**** Enable autosave
#+begin_src emacs-lisp :tangle config.el
(setq auto-save-default t)
#+end_src

**** Auto backup files
#+begin_src emacs-lisp :tangle config.el
(setq make-backup-files t)
#+end_src


*** Misc
**** Truncate doom dashboard
#+begin_src emacs-lisp :tangle config.el
(setq +doom-dashboard-menu-sections (cl-subseq +doom-dashboard-menu-sections 0 2))
#+end_src

**** Projectile
#+begin_src emacs-lisp :tangle config.el
(setq projectile-project-search-path '("~/code"))
#+end_src

**** Fish completion
#+begin_src emacs-lisp :tangle config.el
(when (and (executable-find "fish")
           (require 'fish-completion nil t))
  (global-fish-completion-mode))
#+end_src

**** Packages
#+begin_src emacs-lisp :tangle packages.el
(package! restclient)
(package! cheat-sh)
#+end_src


* Doom
- This is main doom configuration file
#+begin_src emacs-lisp :tangle init.el
(doom! :input
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       (company +tng)          ; the ultimate code completion backend
       (helm
        +fuzzy
        +icons)              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;; (ivy
       ;;  +fuzzy
       ;;  +icons
       ;;  +childframe)               ; a search engine for love and life
       ;;vertico           ; the search engine of the future

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       doom-quit         ; DOOM quit-message prompts when you quit Emacs
       ;;(emoji +unicode)  ; 🙂
       ;; hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;hydra
       indent-guides     ; highlighted indent columns
       ;; ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup
        +defaults
        +all)   ; tame sudden yet inevitable temporary windows
       ;; tabs              ; a tab bar for Emacs
       treemacs          ; a project drawer, like neotree but cooler
       unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       (window-select +numbers)     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       ;; zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       (format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       ;;multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;; parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       ( dired +icons)             ; making dired pretty [functional] directory editor
       electric          ; smarter, keyword-based electric-indent
       ( ibuffer +icons )         ; interactive buffer management
       ( undo +tree )              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       ;; eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       ;;(spell +flyspell) ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ansible
       ;; (debugger +lsp)          ; FIXME stepping through code, to help you add bugs
       ;; direnv
       docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       (lsp +elgot)                 ; M-x vscode
       magit             ; a git porcelain for Emacs
       make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       upload            ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       ( tty +osc)               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       ;;cc                ; C > C++ == 1
       ;; (clojure +lsp)           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       csharp            ; unity, .NET, and mono shenanigans
       data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       (go +lsp)         ; the hipster dialect
       ;;(haskell +dante)  ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       json              ; At least it ain't XML
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       ;; (javascript +lsp)        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       (latex
        +lsp
        +latexmk)             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;; (ledger +evil-ledger)           ; be audit you can be
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org
        +pretty
        +pomodoro
        +dragndrop
        )               ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       (python
       +lsp
       +pyright
       );beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       (sh
        +powershell
        +lsp)                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;; (web +lsp)               ; the tubes
       yaml              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       ;;(mu4e +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       literate
       (default +bindings +smartparens))
#+end_src
