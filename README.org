#+TITLE: Literate doom emacs config

* Headers
- Setup lexical binding headers at the beginning of config files
#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-
#+end_src

#+begin_src emacs-lisp :tangle config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el
#+end_src

* Doom
- This is main doom configuration file
- Doom packages are focused mostly on Admin/DevOps/SRE work.
  - org-mode for huge documentation potential
  - Many of the packages are selected for configuration formats, like JSON, YAML
  - Tools like ansible, terraform
  - Shell scripting with powershell option (big fan of azure)
  - vterm as I prefer my own system shell (fish) instead of eshell
  - evil and tng for quick movement and completion
  - helm for powerful searches
#+begin_src emacs-lisp :tangle init.el
(doom! :completion
       (company +tng)       ; the ultimate code completion backend
       (helm +fuzzy +icons) ; the *other* search engine for love and life

       :ui
       doom                     ; what makes DOOM look the way it does
       doom-dashboard           ; a nifty splash screen for Emacs
       doom-quit                ; DOOM quit-message prompts when you quit Emacs
       indent-guides            ; highlighted indent columns
       modeline                 ; snazzy, Atom-inspired modeline, plus API
       ophints                  ; highlight the region an operation acts on
       (popup +defaults +all)   ; tame sudden yet inevitable temporary windows
       treemacs                 ; a project drawer, like neotree but cooler
       unicode                  ; extended unicode support for various languages
       vc-gutter                ; vcs diff in the fringe
       vi-tilde-fringe          ; fringe tildes to mark beyond EOB
       (window-select +numbers) ; visually switch windows
       workspaces               ; tab emulation, persistence & separate workspaces

       :editor
       (evil +everywhere) ; come to the dark side, we have cookies
       file-templates     ; auto-snippets for empty files
       fold               ; (nigh) universal code folding
       (format +onsave)   ; automated prettiness
       snippets           ; my elves. They type so I don't have to

       :emacs
       ( dired +icons)    ; making dired pretty [functional] directory editor
       electric           ; smarter, keyword-based electric-indent
       ( ibuffer +icons ) ; interactive buffer management
       ( undo +tree )     ; persistent, smarter undo for your inevitable mistakes
       vc                 ; version-control and Emacs, sitting in a tree

       :term
       vterm ; the best terminal emulation in Emacs

       :checkers
       syntax ; tasing you for every semicolon you forget

       :tools
       ansible
       direnv
       docker
       editorconfig    ; let someone else argue about tabs vs spaces
       (eval +overlay) ; run code, run (also, repls)
       lookup          ; navigate your code and its documentation
       (lsp +elgot)    ; M-x vscode
       magit           ; a git porcelain for Emacs
       make            ; run make tasks from Emacs
       pdf             ; pdf enhancements
       rgb             ; creating color strings
       terraform       ; infrastructure as code
       upload          ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos) ; improve compatibility with macOS
       ( tty +osc)        ; improve the terminal Emacs experience

       :lang
       (org +pretty +pomodoro +dragndrop) ; organize your plain life in plain text
       (go +lsp)                          ; the hipster dialect
       (python +lsp +pyright)             ;beautiful is better than ugly
       (sh +lsp +powershell)              ; she sells {ba,z,fi}sh shells on the C xor
       data                               ; config/data formats
       json                               ; At least it ain't XML
       yaml                               ; JSON, but readable
       markdown                           ; writing docs for people to ignore
       emacs-lisp                         ; drown in parentheses

       :app
       calendar

       :config
       literate
       (default +bindings +smartparens))
#+end_src

* Emacs
** Personal information
- Basic personal information, that some of the packages might require
#+begin_src emacs-lisp :tangle config.el
(setq  user-full-name "Sebastian Zawadzki"
       user-mail-address (rot13 "fronfgvna@mnjnqmxv.grpu"))
#+end_src

** Keybindings
*** Mac specific keybindings
- Command is such a versatile key on Mac, I want to use it a lot in emacs as well
- Option as alt is really nothing important, but figured it might as well be bound to it
#+begin_src emacs-lisp :tangle config.el
(cond (IS-MAC
       (setq mac-command-modifier       'meta
             mac-option-modifier        'alt)))
#+end_src

*** Mac style copy/paste/app exiting
- I really like using cmd+c and cmd+v as copy paste, it's what I'm used to
- Makes even more sense that I share system clipboard with emacs on MacOS (I don't even remember original behavior anymore lol)
- Cmd+q to quit, same as on MacOS
#+begin_src emacs-lisp :tangle config.el
(map! "M-c" 'kill-ring-save)
(map! "M-v" 'yank)
(map! "M-q" 'save-buffers-kill-terminal)
#+end_src

** Appearance
*** Default fallback theme
#+begin_src emacs-lisp :tangle config.el
;; (setq doom-theme 'doom-one)
#+end_src

*** Day/Night mode switching function (based on emacs-plus patch)
- I regularly use day theme at day and night at night, so this is really great setting for me
- Both variants of solarized look awesome
#+begin_src emacs-lisp :tangle config.el
(defun my/apply-theme (appearance)
  (mapc #'disable-theme custom-enabled-themes)
  (pcase appearance
    ('light (setq doom-theme 'doom-solarized-light)
             (load-theme 'doom-solarized-light t))
    ('dark (setq doom-theme 'doom-solarized-dark)
             (load-theme 'doom-solarized-dark t))))

(add-hook 'ns-system-appearance-change-functions #'my/apply-theme)
#+end_src

*** Set font
- FiraCode font is cool and totally readable
- Retina for that MacOS screens
#+begin_src emacs-lisp :tangle config.el
(setq  doom-font (font-spec :family "FiraCode Nerd Font" :style "Retina" :size 12))
#+end_src

*** Start emacs maximized
#+begin_src emacs-lisp :tangle config.el
(setq initial-frame-alist '((fullscreen . maximized)))
#+end_src

*** Truncate doom dashboard
#+begin_src emacs-lisp :tangle config.el
(setq +doom-dashboard-menu-sections (cl-subseq +doom-dashboard-menu-sections 0 2))
#+end_src

*** Set frame title and icon
- Remove unneeded clutter for frame title
#+begin_src emacs-lisp :tangle config.el
(setq-default
 frame-title-format '("Doom")
 ns-use-proxy-icon nil)
#+end_src

*** Make window indicator more visible
- This setting makes window switching number more visible
- Window switching number appears when window switch happens with more than two windows
#+begin_src emacs-lisp :tangle config.el
(custom-set-faces!
  '(aw-leading-char-face
    :foreground "red"
    :weight bold :height 1.5 ))
#+end_src

*** Modeline
- Setup icons for modeline
#+begin_src emacs-lisp :tangle config.el
(setq doom-modeline-icon (display-graphic-p)
      doom-modeline-major-mode-icon t
      doom-modeline-major-mode-color-icon t
      doom-modeline-buffer-state-icon t)
#+end_src

*** Always make windows proportional after splitting
#+begin_src emacs-lisp :tangle config.el
(setq-default window-combination-resize t)
#+end_src

*** Truncate ellipsis
#+begin_src emacs-lisp :tangle config.el
(setq-default truncate-string-ellipsis "…")
#+end_src

*** Uniquify
- Make buffer names unique (use path in name in case of duplicates)
#+begin_src emacs-lisp :tangle config.el
(require 'uniquify)

(setq-default
 uniquify-buffer-name-style 'forward)

(setq uniquify-separator "/"
      uniquify-after-kill-buffer-p t
      uniquify-ignore-buffers-re "^\\*")
#+end_src

** Editor
*** Enable autosave
#+begin_src emacs-lisp :tangle config.el
(setq auto-save-default t)
#+end_src

*** Auto backup files
#+begin_src emacs-lisp :tangle config.el
(setq make-backup-files t)
#+end_src

*** Set default tab-width
#+begin_src emacs-lisp :tangle config.el
(setq-default tab-width 2)
#+end_src

*** Relative numbers
#+begin_src emacs-lisp :tangle config.el
(setq  display-line-numbers-type 'relative)
#+end_src

*** Set scroll margin
#+begin_src emacs-lisp :tangle config.el
(setq scroll-margin 5)
#+end_src

*** Disable final newline in files
#+begin_src emacs-lisp :tangle config.el
(setq require-final-newline nil)
#+end_src

* Evil
** Set up evil packages
- Quick commenting/uncommenting with evil-commentary
- I want to be able to use substitution with s, and don't use evil-snipe: disabled
#+begin_src emacs-lisp :tangle packages.el
(package! evil-commentary)
(package! evil-snipe :disable t)
#+end_src

** Split windows so that right/down is focused after the split
- Focus the new window after split
- I make the new window for a reason, why would I focus the old one?
#+begin_src emacs-lisp :tangle config.el
(setq evil-vsplit-window-right t
      evil-split-window-below t)
#+end_src

** Line up Y behavior to other operators
- Keep capital operators in line
- For the whole lines, yy is used
#+begin_src emacs-lisp :tangle config.el
(setq evil-want-Y-yank-to-eol t)
#+end_src

** Don't continue comments on o/O, creating empty lines
- It gets into my way too much
- If I want to continue commented line, I'll either manually comment it, or use evil-commentary
#+begin_src emacs-lisp :tangle config.el
(setq +evil-want-o/O-to-continue-comments nil)
#+end_src

** Keybinds
*** Evil Window Map
- Change regular active window rotation to ace-window, so I can choose by number if more than 2 windows are present
- Enable jumping to treemacs from any window in frame
#+begin_src emacs-lisp :tangle config.el
(map! :map evil-window-map
      :g "w" 'ace-window
      :g "t" 'treemacs-select-window)
#+end_src

*** Enable key-chord and make double tap ';' move cursor to the right in insert mode
- I don't want to each for an arrow key, ';' key is in the home row, so I can double tap to jump over any character, for example parenthesis
- Utilize key-chord for this task
#+begin_src emacs-lisp :tangle packages.el
(package! key-chord)
#+end_src

#+begin_src emacs-lisp :tangle config.el
(require 'key-chord)

(key-chord-define evil-insert-state-map ";;" 'right-char)
(key-chord-mode 1)
#+end_src

*** Disable evil keybindings for git-timemachine
- They don't really work in git-timemachine
- git-timemachine has it's own keybindings set, and it forces you to stick to it
#+begin_src emacs-lisp :tangle config.el
(with-eval-after-load 'git-timemachine
  (evil-make-overriding-map git-timemachine-mode-map 'normal)
  (add-hook 'git-timemachine-mode-hook #'evil-normalize-keymaps))
#+end_src

* Org mode
** Keybinds
*** org-mode-map
- Set keybind for decryption of entries
- Set keybind for showing inline images
- Force tab to use org-cycle instead of faultly switching to company after reload
#+begin_src emacs-lisp :tangle config.el
(map! :map org-mode-map
      :localleader "$" 'org-decrypt-entry
      :localleader "a i" 'org-display-inline-images
      "<tab>" 'org-cycle)
#+end_src

*** Set visual line movement via gj and gk
- want gj and gk to move per visual line, instead of some weird paragraph jumping
#+begin_src emacs-lisp :tangle config.el
(after! org
  (map! :nv "gj" #'evil-next-visual-line
        :nv "gk" #'evil-previous-visual-line))
#+end_src

** Set up path for org mode
- Set main org-mode directory
- Set capture file inside of org-mode directory
#+begin_src emacs-lisp :tangle config.el
(setq org-directory "/Users/sebastian/code/engineer_notebook"
      org-default-notes-file (concat org-directory "/!capture.org"))
#+end_src

** Set up headline encryption
- Encrypt headlines with tag "crypt"
- Disable autosave for files with "crypt" tag
- Use personal GPG key for encryption
#+begin_src emacs-lisp :tangle config.el
(require 'org-crypt)

(setq org-tags-exclude-from-inheritance '("crypt")
      org-crypt-disable-auto-save t
      org-crypt-key "Sebastian Zawadzki")
#+end_src

** Disable electric indent
#+begin_src emacs-lisp :tangle config.el
(add-hook! org-mode (electric-indent-local-mode -1))
#+end_src

** Org kanban
#+begin_src emacs-lisp :tangle packages.el
(package! org-kanban)
#+end_src

** Inline images
- Enable displaying of remote inline images
- Startup with inline images
- Allow for controlling image width
#+begin_src emacs-lisp :tangle config.el
(setq org-display-remote-inline-images t
      org-startup-with-inline-images t
      org-image-actual-width nil)
#+end_src

** Log time of done tasks
#+begin_src emacs-lisp :tangle config.el
(setq org-log-done 'time)
#+end_src


** Task status and prioritization
#+begin_src emacs-lisp :tangle config.el
(after! org
  (setq
   org-crypt-disable-auto-save t
   org-priority-highest '?A
   org-priority-lowest  '?C
   org-priority-default '?C
   org-priority-start-cycle-with-default t
   org-priority-faces '((?A :foreground "#FF6C6B" :weight normal)
                        (?B :foreground "#ECBE7B" :weight normal)
                        (?C :foreground "#51AFEF" :weight normal))
   org-todo-keywords '((sequence "[TODO](t)" "[INPROGRESS](i)" "[WAITING](w)"  "|" "[DONE](d)" "[CANCELLED](c)"))
   org-todo-keyword-faces
   '(("[TODO]" :foreground "#8741bb" :weight normal)
     ("[INPROGRESS]" :foreground "#98BE65" :weight normal)
     ("[WAITING]" :foreground "#DA8548" :weight normal)
     ("[DONE]" :foreground "#9FA4BB" :weight normal )
     ("[CANCELLED]" :foreground "#574C58" :weight normal))))

#+end_src

** Disable company for org-mode
#+begin_src emacs-lisp :tangle config.el
(setq company-global-modes '(not org-mode))
(add-hook 'org-mode-hook (lambda () ( company-mode -1)))
#+end_src

** Appearance
*** Headlines
#+begin_src emacs-lisp :tangle config.el
(setq org-superstar-headline-bullets-list '("⁖"))

(after! org
  (custom-set-faces!
    '(org-level-1 :height 1.04 :inherit outline-1)
    '(org-level-2 :height 1.04 :inherit outline-2)
    '(org-level-3 :height 1.04 :inherit outline-3)
    '(org-level-4 :height 1.04 :inherit outline-4)
    '(org-level-5 :height 1.04 :inherit outline-5)
    '(org-level-6 :height 1.04 :inherit outline-6)
    '(org-level-7 :height 1.04 :inherit outline-7)
    '(org-level-8 :height 1.04 :inherit outline-8)))
#+end_src

*** Bullet points
- disable superstar, and replace with dot
#+begin_src emacs-lisp :tangle config.el
(setq org-superstar-prettify-item-bullets nil)

(font-lock-add-keywords 'org-mode
 '(("^ *\\([-]\\) "
 (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+end_src

*** Checkboxes
#+begin_src emacs-lisp :tangle config.el
(add-hook 'org-mode-hook (lambda ()
  (push '("[ ]" . "") prettify-symbols-alist)
  (push '("[-]" . "" ) prettify-symbols-alist)
  (push '("[X]" . "" ) prettify-symbols-alist)
  (push '("[#A]" . "⁂" ) prettify-symbols-alist)
  (push '("[#B]" . "⁑" ) prettify-symbols-alist)
  (push '("[#C]" . "⁕" ) prettify-symbols-alist)
  (prettify-symbols-mode)))
#+end_src

*** Fancy priorities
#+begin_src emacs-lisp :tangle config.el
(after! org-fancy-priorities
  (setq
   org-fancy-priorities-list '((65 . "⁂")
                               (66 . "⁑")
                               (67 . "⁕"))))
#+end_src

*** Move tags to the far right
#+begin_src emacs-lisp :tangle config.el
(setq org-tags-column -77)
#+end_src

* Treemacs
** Pull all the icons for treemacs
#+begin_src emacs-lisp :tangle packages.el
(package! treemacs-all-the-icons)
#+end_src

** Set treemacs themes
#+begin_src emacs-lisp :tangle config.el
(require 'treemacs-all-the-icons)
(treemacs-load-theme "all-the-icons")

(setq  doom-themes-treemacs-theme "doom-colors")
#+end_src

* Company

** Disable autocommit of completion
#+begin_src emacs-lisp :tangle config.el
(setq company-auto-complete nil)
#+end_src

** Tooltips
#+begin_src emacs-lisp :tangle config.el
(setq company-tooltip-align-annotations t
      company-tooltip-minimum (- scroll-margin 1)
      company-tooltip-flip-when-above t)
#+end_src

** Matching
#+begin_src emacs-lisp :tangle config.el
(setq company-minimum-prefix-length 1
      company-require-match nil)
#+end_src

** Delay
#+begin_src emacs-lisp :tangle config.el
(setq company-idle-delay 0)
#+end_src

* Tools
#+begin_src emacs-lisp :tangle packages.el
(package! restclient)
(package! cheat-sh)
#+end_src
